{
  "stats": {
    "suites": 3,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-18T14:18:36.308Z",
    "end": "2023-10-18T14:18:39.886Z",
    "duration": 3578,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4a91644a-6a8c-4699-a965-4c9a02bdc2c0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "31404e2d-2673-42c9-8398-91c37606efde",
          "title": "Property Controller",
          "fullFile": "D:\\Newton\\Contest-Property_Rental\\property_rental\\__tests__\\test.js",
          "file": "\\__tests__\\test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Property Controller\"",
              "fullTitle": "Property Controller \"before all\" hook in \"Property Controller\"",
              "timedOut": false,
              "duration": 2829,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connect(testURI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\nconsole.log('Connected to DB');\nconst properties = [\n  {\n    title: 'Property 1',\n    location: 'Location 1',\n    price: 1000,\n    type: 'House',\n  },\n  {\n    title: 'Property 2',\n    location: 'Location 2',\n    price: 1500,\n    type: 'Apartment',\n  },\n];\nawait Property.insertMany(properties);",
              "err": {},
              "uuid": "67d1089e-e62c-4dab-ac01-ecd9713accb7",
              "parentUUID": "31404e2d-2673-42c9-8398-91c37606efde",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Property Controller\"",
              "fullTitle": "Property Controller \"after all\" hook in \"Property Controller\"",
              "timedOut": false,
              "duration": 100,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Property.deleteMany({});",
              "err": {},
              "uuid": "b38a1b31-b34b-48f9-bbde-dc4f9e6c960b",
              "parentUUID": "31404e2d-2673-42c9-8398-91c37606efde",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all properties",
              "fullTitle": "Property Controller should return all properties",
              "timedOut": false,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get('/api/v1/properties')\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body).to.be.an('array');\n    expect(res.body.length).to.equal(2);\n    done();\n  });",
              "err": {},
              "uuid": "8110c467-c26a-4c71-b53c-3b2c37ba9094",
              "parentUUID": "31404e2d-2673-42c9-8398-91c37606efde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new property",
              "fullTitle": "Property Controller should create a new property",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProperty = {\n  title: 'New Property',\n  location: 'New Location',\n  price: 2000,\n  type: 'Condo',\n};\nchai\n  .request(app)\n  .post('/api/v1/properties')\n  .send(newProperty)\n  .end((err, res) => {\n    expect(res).to.have.status(201);\n    expect(res.body)\n      .to.have.property('message')\n      .to.equal('Property added successfully');\n    expect(res.body).to.have.property('property');\n    expect(res.body.property)\n      .to.have.property('title')\n      .to.equal('New Property');\n    done();\n  });",
              "err": {},
              "uuid": "8f6364d3-6da3-41f3-bd6e-0aef32142b86",
              "parentUUID": "31404e2d-2673-42c9-8398-91c37606efde",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "675f5ea4-92aa-4802-bb1e-bf420517f4fc",
              "title": "searchProperties",
              "fullFile": "D:\\Newton\\Contest-Property_Rental\\property_rental\\__tests__\\test.js",
              "file": "\\__tests__\\test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should search properties by title",
                  "fullTitle": "Property Controller searchProperties should search properties by title",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const searchTerm = 'Property 1';\nchai\n  .request(app)\n  .get(`/api/v1/properties/search?searchTerm=${searchTerm}`)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body).to.be.an('array');\n    expect(res.body.length).to.equal(1);\n    expect(res.body[0].title).to.equal(searchTerm);\n    done();\n  });",
                  "err": {},
                  "uuid": "95ed1e98-3505-431b-b18f-1e47a39d78fc",
                  "parentUUID": "675f5ea4-92aa-4802-bb1e-bf420517f4fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95ed1e98-3505-431b-b18f-1e47a39d78fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "d0764ba2-b153-43c5-9d97-26f1d8a52d03",
              "title": "filterProperties",
              "fullFile": "D:\\Newton\\Contest-Property_Rental\\property_rental\\__tests__\\test.js",
              "file": "\\__tests__\\test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should filter properties by location, minPrice, maxPrice, and type",
                  "fullTitle": "Property Controller filterProperties should filter properties by location, minPrice, maxPrice, and type",
                  "timedOut": false,
                  "duration": 202,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const filters = {\n  location: 'Location 1', // Adjust based on your seed data\n  minPrice: 1000,\n  maxPrice: 1500,\n  type: 'House',\n};\nchai\n  .request(app)\n  .get('/api/v1/properties/filter')\n  .query(filters)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body).to.be.an('array');\n    // Adjust expectations based on your seed data and filters\n    // Ensure that the properties meet the specified criteria\n    done();\n  });",
                  "err": {},
                  "uuid": "92ccee36-c773-4f8b-8632-912f4e2ab8b8",
                  "parentUUID": "d0764ba2-b153-43c5-9d97-26f1d8a52d03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92ccee36-c773-4f8b-8632-912f4e2ab8b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 202,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [
            "8110c467-c26a-4c71-b53c-3b2c37ba9094",
            "8f6364d3-6da3-41f3-bd6e-0aef32142b86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 336,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}